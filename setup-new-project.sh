#!/bin/bash

# ScriptAIble Template Setup Script
# Creates a new project from the ScriptAIble template

set -e  # Exit on error

echo "üé¨ ScriptAIble Template Setup"
echo "=============================="
echo

# Get project details from user
echo "Enter your project details:"
echo

read -p "Project name (e.g., 'my-screenplay-app'): " PROJECT_NAME
if [ -z "$PROJECT_NAME" ]; then
    echo "‚ùå Project name is required"
    exit 1
fi

read -p "Display name (e.g., 'My Screenplay App'): " DISPLAY_NAME
if [ -z "$DISPLAY_NAME" ]; then
    DISPLAY_NAME="$PROJECT_NAME"
fi

read -p "Description: " DESCRIPTION
if [ -z "$DESCRIPTION" ]; then
    DESCRIPTION="Professional screenplay editing application"
fi

read -p "Author name: " AUTHOR_NAME
if [ -z "$AUTHOR_NAME" ]; then
    AUTHOR_NAME="Developer"
fi

read -p "Version (default: 1.0.0): " VERSION
if [ -z "$VERSION" ]; then
    VERSION="1.0.0"
fi

echo
echo "üîß Setting up project: $DISPLAY_NAME"
echo "   Name: $PROJECT_NAME"
echo "   Author: $AUTHOR_NAME" 
echo "   Version: $VERSION"
echo

# Update root package.json
echo "üìù Updating root package.json..."
if [ -f package.json ]; then
    # Use sed to replace template values
    sed -i.backup "s/\"name\": \"fountain-js\"/\"name\": \"$PROJECT_NAME\"/g" package.json
    sed -i.backup "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/g" package.json
    sed -i.backup "s/\"description\": \"[^\"]*\"/\"description\": \"$DESCRIPTION\"/g" package.json
    rm -f package.json.backup
fi

# Update editor package.json
echo "üìù Updating editor package.json..."
if [ -f editor/package.json ]; then
    sed -i.backup "s/\"name\": \"editor\"/\"name\": \"$PROJECT_NAME-editor\"/g" editor/package.json
    sed -i.backup "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/g" editor/package.json
    rm -f editor/package.json.backup
fi

# Update HTML title
echo "üìù Updating HTML title..."
if [ -f editor/index.html ]; then
    sed -i.backup "s/<title>[^<]*<\\/title>/<title>$DISPLAY_NAME<\\/title>/g" editor/index.html
    rm -f editor/index.html.backup
fi

# Create custom configuration
echo "üìù Creating custom configuration..."
if [ -f editor/src/config/custom-config.example.ts ]; then
    cat > editor/src/config/custom-config.ts << EOF
// Custom Configuration for $DISPLAY_NAME
// This file is automatically generated by setup-new-project.sh

import type { AppConfig } from './appConfig';

export const CUSTOM_CONFIG: Partial<AppConfig> = {
  name: '$DISPLAY_NAME',
  version: '$VERSION',
  description: '$DESCRIPTION',
  author: '$AUTHOR_NAME',
  
  // Customize features as needed
  features: {
    statistics: true,
    versionControl: true,
    pdfExport: true,
    fdxImport: true,
    spellCheck: true,
    sceneBoard: true,
    testSuite: false, // Usually disabled in production
    slateEditor: true,
  },
  
  // Customize theme colors
  theme: {
    primary: '#2c5aa0',
    secondary: '#28a745', 
    background: '#ffffff',
    text: '#333333',
    accent: '#007bff',
  },
  
  // Storage namespace (prevents conflicts with other apps)
  storage: {
    prefix: '$(echo $PROJECT_NAME | sed 's/-/_/g')',
    maxScripts: 100,
    compressionEnabled: false,
  },
  
  export: {
    defaultAuthor: '$AUTHOR_NAME',
    includeTitlePage: true,
  },
};
EOF
    echo "   ‚úÖ Created editor/src/config/custom-config.ts"
fi

# Update README
echo "üìù Creating project README..."
cat > README.md << EOF
# $DISPLAY_NAME

$DESCRIPTION

Built with the ScriptAIble Template - a professional screenplay editing foundation.

## Features

- ‚úÖ **Professional Screenplay Editing** with industry-standard formatting
- ‚úÖ **Auto-save** with persistent storage
- ‚úÖ **PDF Export** with proper screenplay margins and fonts  
- ‚úÖ **Final Draft Import/Export** (.fdx compatibility)
- ‚úÖ **Version Control** with undo/redo and history
- ‚úÖ **Script Statistics** with detailed analytics
- ‚úÖ **Scene Board** visual overview
- ‚úÖ **Spell Checking** with screenplay-aware dictionary

## Development

\`\`\`bash
# Install dependencies
npm install && npm run editor:install

# Start development server
npm run dev

# Build for production
npm run build && npm run editor:build
\`\`\`

## Customization

Edit \`editor/src/config/custom-config.ts\` to customize:
- App name and branding
- Feature flags
- Theme colors
- Export settings
- Storage configuration

## Scripts

- \`npm run dev\` - Start development server
- \`npm run build\` - Build fountain-js library
- \`npm run editor:dev\` - Start editor only
- \`npm run editor:build\` - Build editor for production

## Author

Created by $AUTHOR_NAME using the ScriptAIble Template.

---

**Template Version:** Based on ScriptAIble Template v1.0.0
**Created:** $(date +"%Y-%m-%d")
EOF

echo "   ‚úÖ Created README.md"

# Clean up template files
echo "üßπ Cleaning up template files..."
rm -f setup-new-project.sh
rm -f editor/src/config/custom-config.example.ts

# Initialize git if not already initialized
if [ ! -d .git ]; then
    echo "üîÑ Initializing Git repository..."
    git init
    git add .
    git commit -m "Initial commit: $DISPLAY_NAME

Created from ScriptAIble Template
- Configured for: $DESCRIPTION
- Author: $AUTHOR_NAME
- Version: $VERSION"
    echo "   ‚úÖ Git repository initialized"
fi

echo
echo "üéâ Project setup complete!"
echo
echo "Next steps:"
echo "   1. cd into your project directory"
echo "   2. Run: npm install && npm run editor:install"
echo "   3. Run: npm run dev"
echo "   4. Open: http://localhost:5173"
echo
echo "üìö Customization:"
echo "   ‚Ä¢ Edit: editor/src/config/custom-config.ts"
echo "   ‚Ä¢ Theme: Modify colors and branding" 
echo "   ‚Ä¢ Features: Enable/disable functionality"
echo "   ‚Ä¢ Storage: Change app namespace"
echo
echo "Happy writing! üé¨‚ú®"
EOF

chmod +x setup-new-project.sh